# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master
    - production

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
skip_non_tags: true

# Skipping commits with particular message or from specific user
skip_commits:
  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/      # Regex for matching commit message
  author: John                                      # Commit author's username, name, email or regexp maching one of these.

# Including commits with particular message or from specific user
only_commits:
  message: /build/                # Start a new build if message contains 'build'
  author: jack@company.com        # Start a new build for commit of user with email jack@company.com

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input
  - ps: iex ((new-object net.webclient).DownloadString("https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1"))  

# clone directory
clone_folder: c:\projects\myproject

# fetch repository as zip archive
shallow_clone: true                 # default is "false"

# set clone depth
#clone_depth: 5                      # clone entire repository history if not defined

environment:

  with_libpng: 1    # needs zlib; removing will break current tests

  with_libjpeg: 1   # will download nasm; removing will break current tests

  with_freetype: 1  # removing breaks bindings freetype test

  with_iconv: 0     

  with_tiff: 1      # needs zlib and jpeg
  
  appveyor_rdp_password: HelloWorld123
  
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.
  allow_failures:
    - platform: x86
      configuration: Release
      build_compiler: "mingw"
      build_bindings: 1
    # - platform: x64
      # configuration: Release

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
#platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
#configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

#build:
  # parallel: true                  # enable MSBuild parallel builds
  # project: MyTestAzureCS.sln      # path to Visual Studio solution or project
  # publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
  # publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
  # publish_azure: true             # package Azure Cloud Service projects and push to artifacts
  # publish_nuget: true             # package projects with .nuspec files and push to artifacts
  # publish_nuget_symbols: true     # generate and publish NuGet symbol packages
  # include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

  # MSBuild verbosity level
  #verbosity: quiet|minimal|normal|detailed


# scripts to run before build
#before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
#before_package:

# scripts to run after build
#after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:
  #- if [%build_compiler%]==[mingw] if [%build_platform%]==[x86] 
  - SET PATH=C:\MinGW\bin;%PATH%
  - cmd: gcc test.c -o test.exe -lws2_32
  
# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#



#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:

  # pushing a single file
  - path: test.exe

  # pushing a single file with environment variable in path and "Deployment name" specified
  - path: "test - GitHub Releases"
    name: test-v{version}

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:

    # FTP deployment provider settings
  # - provider: FTP
    # protocol: ftp|ftps|sftp
    # host: ftp.myserver.com
    # username: admin
    # password:
      # secure: eYKZKFkkEvFYWX6NfjZIVw==
    # folder:
    # application:
    # active_mode: false
    # beta: true      # enable alternative FTP library for ftp and ftps modes
    # debug: true     # show complete FTP log

    # Amazon S3 deployment provider settings
  # - provider: S3
    # access_key_id:
      # secure: ABcd==
    # secret_access_key:
      # secure: ABcd==
    # bucket: my_bucket
    # folder:
    # artifact:
    # set_public: false

    # Azure Blob storage deployment provider settings
  # - provider: AzureBlob
    # storage_account_name:
      # secure: ABcd==
    # storage_access_key:
      # secure: ABcd==
    # container: my_container
    # folder:
    # artifact:

    # Web Deploy deployment provider settings
  # - provider: WebDeploy
    # server: http://www.deploy.com/myendpoint
    # website: mywebsite
    # username: user
    # password:
      # secure: eYKZKFkkEvFYWX6NfjZIVw==
    # ntlm: false
    # remove_files: false
    # app_offline: false
    # do_not_use_checksum: true           # do not use check sum for comparing source and destination files. By default checksums are used.
    # sync_retry_attempts: 2              # sync attempts, max
    # sync_retry_interval: 2000           # timeout between sync attempts, milliseconds
    # aspnet_core: true                   # artifact zip contains ASP.NET Core application
    # aspnet_core_force_restart: true     # poke apps web.config before deploy to force application restart
    # skip_dirs: \\App_Data
    # skip_files: web.config
    # on:
      # branch: release
      # platform: x86
      # configuration: debug

    # Deploying to Azure Cloud Service
  # - provider: AzureCS
    # subscription_id:
      # secure: fjZIVw==
    # subscription_certificate:
      # secure: eYKZKFkkEv...FYWX6NfjZIVw==
    # storage_account_name: my_storage
    # storage_access_key:
      # secure: ABcd==
    # service: my_service
    # slot: Production
    # target_profile: Cloud
    # artifact: MyPackage.cspkg

    # Deploying to NuGet feed
  # - provider: NuGet
    # server: https://my.nuget.server/feed
    # api_key:
      # secure: FYWX6NfjZIVw==
    # skip_symbols: false
    # symbol_server: https://your.symbol.server/feed
    # artifact: MyPackage.nupkg

    # Deploy to GitHub Releases
  - provider: GitHub
    auth_token:
    secure: b4398a0556a03f646dd837b170f273d33cc9b232
    #artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
    artifact: /.*\.exe/           # upload all NuGet packages to release assets	
    draft: false
    prerelease: false
    on:
      branch: master                # release from master branch only
      appveyor_repo_tag: true       # deploy on tag push only

    # # Deploying to a named environment
  # - provider: Environment
    # name: staging
    # on:
      # branch: staging
      # env_var1: value1
      # env_var2: value2

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  #- do something

# on build failure
on_failure:
  #- do something

# after build failure or success
on_finish:
  #- do something
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString("https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1"))


#---------------------------------#
#         notifications           #
#---------------------------------#

notifications:

  # Email
  # - provider: Email
    # to:
      # - user1@email.com
      # - user2@email.com
    # subject: Build {{status}}                 # optional
    # message: "{{message}}, {{commitId}}, ..."    # optional
    # on_build_status_changed: true

  # HipChat
  # - provider: HipChat
    # auth_token:
      # secure: RbOnSMSFKYzxzFRrxM1+XA==
    # room: ProjectA
    # template: "{message}, {commitId}, ..."

  # Slack
  # - provider: Slack
    # incoming_webhook: http://incoming-webhook-url

  # ...or using auth token

  # - provider: Slack
    # auth_token:
      # secure: kBl9BlxvRMr9liHmnBs14A==
    # channel: development
    # template: "{message}, {commitId}, ..."

  # Campfire
  # - provider: Campfire
    # account: appveyor
    # auth_token:
      # secure: RifLRG8Vfyol+sNhj9u2JA==
    # room: ProjectA
    # template: "{message}, {commitId}, ..."

  # Webhook
  # - provider: Webhook
    # url: http://www.myhook2.com
    # headers:
      # User-Agent: myapp 1.0
      # Authorization:
        # secure: GhD+5xhLz/tkYY6AO3fcfQ==
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
